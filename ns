#!/usr/bin/env node

const fs = require('fs')
const execSync = require('child_process').execSync

const args = process.argv.slice(2)
const projectName = args[0]
const projectDir = './' + projectName
const defaultDeps = ['react', 'react-dom']
const defaultDevDeps = [
  '@types/react',
  '@types/react-dom',
  'typescript',
  'ts-node',
  'ts-loader',
  'css-loader',
  'style-loader',
  'webpack',
  'webpack-cli',
  'webpack-dev-server',
  'eslint',
  'mocha'
]
const clientSrcDir = 'src'
const buildDir = 'dist'
const assetsDir = 'static'
const defaultScripts = {
  'clean': "rm -rf ${buildDir}",
  'build': 'webpack --mode production --progress',
  'dev': 'webpack serve --host 0.0.0.0',
  'lint': 'eslint . --ext .ts',
  'test': 'mocha'
}

const exec = (cmd) => {
  console.log(execSync(cmd).toString().trim())
}

const includeScripts = (scripts) => {
  var config = JSON.parse(fs.readFileSync('package.json').toString())
  for (const k in scripts) {
    config.scripts[k] = scripts[k]
  }
  fs.writeFileSync('package.json', JSON.stringify(config, null, 2))
}


if (args.length != 1) {
  console.log('no argument given as an argument, exiting..')
  process.exit(1)
}

console.log('starting new site.. ' + projectName)

console.log('creating new directory: ' + projectDir)
fs.mkdirSync(projectDir, '0777', true)
process.chdir(projectDir)

exec('git init')
exec('npm init -y')
exec('npm i ' + defaultDeps.join(' ') + ' --prefer-offline')
exec('npm i ' + defaultDevDeps.join(' ') + ' --save-dev --prefer-offline')
includeScripts(defaultScripts)

const webpackConfig = `
const path = require('path');
const config = {
    srcDir: path.resolve(__dirname,'${clientSrcDir}'),
    buildDir: path.resolve(__dirname,'${buildDir}'),
    assetsDir: path.resolve(__dirname,'${assetsDir}')
};
module.exports = {
    entry: {
        app: config.srcDir + "/index.tsx"
    },
    module: {
      rules: [
        {
          test: /\.tsx?$/,
          use: 'ts-loader',
          exclude: /node_modules/,
        },
        {
          test: /\.css$/,
          use: ['style-loader', 'css-loader'],
        }
      ]
    },
    resolve: {
      extensions: ['.tsx', '.ts', '.js', '.css'],
    },
    devServer: {
      contentBase: config.assetsDir
    },
    output: {
      path: config.buildDir,
      filename: 'bundle.js',
      publicPath: '/'
    }
};
`.trim()
fs.writeFileSync('webpack.config.js', webpackConfig)

const eslintConfig = `
{
  "root": true,
  "parser": "@typescript-eslint/parser",
  "plugins": [
    "@typescript-eslint"
  ],
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/eslint-recommended"
  ]
}`.trim()
fs.writeFileSync('.eslintrc', eslintConfig)

const eslintIgnore = `
node_modules
${buildDir}
`.trim()
fs.writeFileSync('.eslintignore', eslintIgnore)

let index = `
import React from 'react'
import ReactDOM from 'react-dom'
import './style'

const App = () => {
  return (
    <div>What is this?</div>
  )
}

ReactDOM.render(<App />, document.getElementById('app'));
`.trim()
fs.mkdirSync('src', '0777', true)
fs.writeFileSync('./src/index.tsx', index)

let style = `
html, body { margin: 0; padding: 0; }
`.trim()
fs.writeFileSync('./src/style.css', style)

const indexPage = `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <div id="app">loading..</div>
    <script type="text/javascript" src="bundle.js"></script>
</body>
</html>
`.trim()
fs.mkdirSync('static', '0777', true)
fs.writeFileSync('./static/index.html', indexPage)

const tsconfig = `
{
  "include": ["src/**/*"],
  "exclude": ["node_modules/*", "public/*"],

  "compilerOptions": {
    "module": "CommonJS",
    "target": "es5",
    "strict": true,
    "jsx": "react",
    "esModuleInterop": true,
    "outDir": "target/client",
    "sourceMap": true
  }
}
`.trim()
fs.writeFileSync('./tsconfig.json', tsconfig)

